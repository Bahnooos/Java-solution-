import java.util.*;

interface Shippable {
    String getName();
    double getWeight();
}

abstract class Product {
    String name;
    double price;
    int quantity;

    Product(String name, double price, int quantity) {
        this.name = name;
        this.price = price;
        this.quantity = quantity;
    }

    boolean isExpired() {
        return false;
    }

    boolean requiresShipping() {
        return false;
    }

    double getWeight() {
        return 0;
    }
}

class ExpirableProduct extends Product {
    Date expiryDate;

    ExpirableProduct(String name, double price, int quantity, Date expiryDate) {
        super(name, price, quantity);
        this.expiryDate = expiryDate;
    }

    boolean isExpired() {
        return new Date().after(expiryDate);
    }
}

class ShippableProduct extends Product implements Shippable {
    double weight;

    ShippableProduct(String name, double price, int quantity, double weight) {
        super(name, price, quantity);
        this.weight = weight;
    }

    boolean requiresShipping() {
        return true;
    }

    public String getName() {
        return name;
    }

    public double getWeight() {
        return weight;
    }
}

class ExpirableShippableProduct extends ExpirableProduct implements Shippable {
    double weight;

    ExpirableShippableProduct(String name, double price, int quantity, Date expiryDate, double weight) {
        super(name, price, quantity, expiryDate);
        this.weight = weight;
    }

    boolean requiresShipping() {
        return true;
    }

    public String getName() {
        return name;
    }

    public double getWeight() {
        return weight;
    }
}

class CartItem {
    Product product;
    int quantity;

    CartItem(Product product, int quantity) {
        this.product = product;
        this.quantity = quantity;
    }
}

class Cart {
    List<CartItem> items = new ArrayList<>();

    void add(Product product, int quantity) {
        if (quantity <= product.quantity) {
            items.add(new CartItem(product, quantity));
        }
    }

    boolean isEmpty() {
        return items.isEmpty();
    }
}

class Customer {
    String name;
    double balance;

    Customer(String name, double balance) {
        this.name = name;
        this.balance = balance;
    }
}

class ShippingService {
    static void ship(List<Shippable> items) {
        System.out.println("** Shipment notice **");
        double totalWeight = 0;
        for (Shippable item : items) {
            System.out.printf("1x %s\t%.0fg\n", item.getName(), item.getWeight() * 1000);
            totalWeight += item.getWeight();
        }
        System.out.printf("Total package weight %.1fkg\n", totalWeight);
    }
}

public class Main {
    static void checkout(Customer customer, Cart cart) {
        if (cart.isEmpty()) throw new RuntimeException("Cart is empty");
        double subtotal = 0;
        List<Shippable> toShip = new ArrayList<>();

        for (CartItem item : cart.items) {
            if (item.quantity > item.product.quantity) throw new RuntimeException("Out of stock");
            if (item.product.isExpired()) throw new RuntimeException("Product expired");
            subtotal += item.product.price * item.quantity;
            if (item.product.requiresShipping()) toShip.add((Shippable) item.product);
        }

        double shipping = toShip.isEmpty() ? 0 : 30;
        double total = subtotal + shipping;

        if (customer.balance < total) throw new RuntimeException("Insufficient balance");
        customer.balance -= total;

        if (!toShip.isEmpty()) ShippingService.ship(toShip);

        System.out.println("** Checkout receipt **");
        for (CartItem item : cart.items) {
            System.out.printf("%dx %s\t%.0f\n", item.quantity, item.product.name, item.product.price * item.quantity);
        }
        System.out.println("----------------------");
        System.out.printf("Subtotal\t%.0f\n", subtotal);
        System.out.printf("Shipping\t%.0f\n", shipping);
        System.out.printf("Amount\t\t%.0f\n", total);
        System.out.printf("Remaining Balance\t%.0f\n", customer.balance);
    }

    public static void main(String[] args) {
        Calendar cal = Calendar.getInstance();
        cal.add(Calendar.DATE, 5);

        Product cheese = new ExpirableShippableProduct("Cheese", 100, 10, cal.getTime(), 0.2);
        Product biscuits = new ExpirableShippableProduct("Biscuits", 150, 5, cal.getTime(), 0.7);
        Product tv = new ShippableProduct("TV", 1000, 3, 8.0);
        Product scratchCard = new Product("ScratchCard", 50, 10) {};

        Customer customer = new Customer("Ali", 1000);
        Cart cart = new Cart();
        cart.add(cheese, 2);
        cart.add(biscuits, 1);
        cart.add(scratchCard, 1);

        checkout(customer, cart);
    }
}
